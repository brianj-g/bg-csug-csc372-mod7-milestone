/*
 * Module 6 CTA Option 1: Storing an ArrayList I
 * Brian Gunther
 * CSC372: Programming II
 * Colorado State University Global
 * Dr. Vanessa Cooper
 * September 22, 2024
 * 
 */
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

public class ManageStudents {
	/**
	 * Populates a sample ArrayList with 10 students.  The names and addresses were
	 * 	generated by https://mockaroo.com
	 * @return an ArrayList<Student> of 10 pre-generated student objects
	 * 
	 */
	public static ArrayList<Student> populateList() {
		ArrayList<Student> studentList = new ArrayList<Student>();
		
		// Random names and addresses generated using https://mockaroo.com 
		studentList.add(new Student(208, "Warner O'Hallihane", "29186 Mayfield Plaza"));
		studentList.add(new Student(203, "Anderea Simmers", "856 Riverside Crossing"));
		studentList.add(new Student(210, "Herold Attawell", "76578 Texas Lane"));
		studentList.add(new Student(205, "Arlyn Lidster", "2 Florence Trail"));
		studentList.add(new Student(202, "Alwyn Tumpane", "2 Farmco Point"));
		studentList.add(new Student(209, "Washington Cokayne", "1590 Kennedy Hill"));
		studentList.add(new Student(204, "Noreen Snarr", "29056 Mayfield Way"));
		studentList.add(new Student(201, "Maiga Spinley", "604 Coleman Hill"));
		studentList.add(new Student(206, "Gertruda Haig", "591 Burrows Court"));
		studentList.add(new Student(207, "Halie Arrol", "1995 Iowa Hill"));
		
		return studentList;
	}
	
	/**
	 * Prints a simple text-based menu with options
	 */
	public static void menu() {
		System.out.println("*** Student Management ***");
		System.out.println("1. Print original (unsorted) list");
		System.out.println("2. Sort list by name");
		System.out.println("3. Sort list by roll number");
		System.out.println("4. Manually add a student (optional)");
		System.out.println("5. Exit");
		System.out.print("Please enter a number 1 - 5 and press Enter/Return: ");
	}
	
	public static Student addStudent(){
		Scanner s = new Scanner(System.in);
		
		Student student = new Student();

		System.out.println("Entering Student Information");
		System.out.print("Roll number: ");
		try {
			int rollno = s.nextInt();
			student.setRollno(rollno);	
		} catch (InputMismatchException e) {
			System.out.println("Invalid input");
			student.setRollno(0);
		}
		s.nextLine();
		System.out.print("Name: ");
		String name = s.nextLine();
		if (name == null) {
			name = "null";
		}
		student.setName(name);
		System.out.print("Address: ");
		String address = s.nextLine();
		if (address == null) {
			address = "null";
		}
		student.setAddress(address);
		System.out.println();
		
		return student;
	}

	/**
	 * Main method.  Instantiates an array of students and provides the options to sort by name or roll number
	 * @param args
	 */
	public static void main(String[] args) {
		// Create a list of students using a pre-generated set of names and addresses
		ArrayList<Student> studentList = populateList();
		// Create a reference copy of the list
		ArrayList<Student> studentListUnsorted = new ArrayList<Student>(studentList);
		
		int menuOption = 0;
		Scanner s = new Scanner(System.in);
		
		do {
			menu();
			try {
				menuOption =  s.nextInt();
			} catch (InputMismatchException e) {
				s.nextLine();
				System.out.println("Invalid input");
			}

			System.out.println();
			switch (menuOption){
				case 1:
					// Print unsorted student list
					System.out.println("Unsorted List of Students: ");
					System.out.println();
					for (int i = 0; i < studentListUnsorted.size(); ++i) {
						studentListUnsorted.get(i).printInfo();
						System.out.println();
					}
					break;
				
				case 2:
					// Sort the list by name
					System.out.println("Sorting by name: ");
					System.out.println();
					// Uses the NameComparator class to compare names
					Sort.sortObjects(studentList, new NameComparator());
					for (int i = 0; i < studentList.size(); ++i) {
						studentList.get(i).printInfo();
						System.out.println();
					}
					break;
				
				case 3:
					// Sort the list by roll number
					System.out.println("Sorting by roll number: ");
					System.out.println();
					// Uses the IdComparator class to compare roll numbers (Id's)
					Sort.sortObjects(studentList, new IdComparator());
					for (int i = 0; i < studentList.size(); ++i) {
						studentList.get(i).printInfo();
						System.out.println();
					}
					break;
				
				case 4:
					// Allow user to manually create a student array
					System.out.println("Manual entry has been selected!");
					Student tmpStudent = addStudent();
					studentList.add(tmpStudent);
					studentListUnsorted.add(tmpStudent);
					break;
					
				case 5:
					// Exit message
					System.out.println("Exiting.");
					break;
				
				default:
					System.out.println("You must enter a number 1 - 5");
					System.out.println();
					break;
			}
		} 
		// Exit the program if the user enters '5'
		while (menuOption != 5);
		
		s.close();
	}
}
